{"version":3,"sources":["webpack:///webpack/bootstrap e3a2c4573ae2a2f45a34","webpack:///./client/game.js","webpack:///./client/game_view.js","webpack:///./client/player.js","webpack:///./server/util.js","webpack:///./client/pokemania.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;AChEqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;AC5EA;AACsD;;AAEtD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,4CAA4C;AAChF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,2BAA2B;AAC9C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qCAAqC,kDAAkD;AACvF;;AAEA;AACA,yCAAyC,2BAA2B;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC/PA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACpF6B;AAC7B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC","file":"./client/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e3a2c4573ae2a2f45a34","import { drawPlayer } from './player';\n\nexport const drawGame = (context, offset, players, loading = false) => {\n  context.clearRect(0, 0, CANVAS_X, CANVAS_Y);\n  context.fillStyle = BG_COLOR;\n  context.fillRect(0, 0, CANVAS_X, CANVAS_Y);\n\n  if (loading) {\n    drawLoadingScreen(context);\n  } else {\n    drawGameBoard(context, offset);\n    drawPlayers(context, offset, players);\n  }\n};\n\nconst drawPlayers = (context, offset, players) => {\n  Object.values(players).forEach(player => {\n    if (!outOfCanvasBounds(player, offset)) {\n      drawPlayer(context, offset, player);\n    }\n  });\n};\n\nconst drawLoadingScreen = context => {\n  context.fillStyle = BORDER_COLOR;\n  context.font = \"bold 50px Arial\";\n\n  context.fillText(\"Loading...\", CANVAS_X / 2 - 110, CANVAS_Y / 2);\n};\n\nconst drawGameBoard = (context, offset) => {\n  context.strokeStyle = BORDER_COLOR;\n  context.lineWidth = BORDER_WIDTH;\n  context.strokeRect(offset[0], offset[1], DIM_X, DIM_Y);\n  context.stroke();\n\n  const gradient = context.createLinearGradient(offset[0], offset[1], DIM_X / 2, DIM_Y / 2);\n  gradient.addColorStop(0, GRADIENT_COLOR_ONE);\n  gradient.addColorStop(1, GRADIENT_COLOR_TWO);\n  context.fillStyle = gradient;\n  context.fillRect(offset[0], offset[1], DIM_X, DIM_Y);\n};\n\nconst outOfCanvasBounds = (player, offset) => {\n  const pos = player.pos,\n    radius = player.radius;\n\n  return (pos[0] + offset[0] + radius < 0 ||\n  pos[0] + offset[0] - radius > CANVAS_X ||\n  pos[1] + offset[1] + radius < 0 ||\n  pos[1] + offset[1] - radius > CANVAS_Y);\n};\n\nexport const drawCountdown = (context, time) => {\n  context.beginPath();\n  context.rect(20, 20, 100, 40);\n  context.fillStyle = 'white';\n  context.fill();\n  context.lineWidth = COUNTDOWN_WIDTH;\n  context.strokeStyle = BORDER_COLOR;\n\n  context.fillStyle = BORDER_COLOR;\n  context.font = \"bold 24px Arial\";\n\n  context.fillText(Math.floor(time) / 1000, 25, 45);\n};\n\nconst BG_COLOR = \"#8bf1ff\";\nconst BORDER_WIDTH = 15;\nconst COUNTDOWN_WIDTH = 5;\nconst BORDER_COLOR = \"#001f95\";\nconst GRADIENT_COLOR_ONE = \"#11e80d\";\nconst GRADIENT_COLOR_TWO = \"#0468ff\";\nconst DIM_X = 2000;\nconst DIM_Y = 2000;\nexport const CANVAS_X = 800;\nexport const CANVAS_Y = 500;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/game.js\n// module id = 0\n// module chunks = 0","import Util from '../server/util';\nimport { drawGame, drawCountdown, CANVAS_X, CANVAS_Y } from './game';\n\nclass GameView {\n  constructor(context, socket) {\n    this.context = context;\n    this.socket = socket;\n    this.currentPlayerId = null;\n    this.playStatus = \"startScreen\";\n\n    this.setEventHandlers();\n  }\n\n  start(name) {\n    this.bindKeyHandlers();\n    this.setGameStartScreen(name);\n    this.currentPlayerId = Util.randomId();\n    this.activateDireHitTime = null;\n    this.playStatus = \"playing\";\n    this.initialData = false;\n\n    this.socket.emit(\"new player\", { name: this.name, id: this.currentPlayerId });\n  }\n\n  setEventHandlers() {\n    this.addStartClickListener();\n    this.addInstructionsClickListener();\n    this.addRestartClickListener();\n\n    this.socket.on(\"draw game\", this.drawGame.bind(this));\n    this.socket.on(\"activate dire hit\", this.startCountdown.bind(this));\n    this.socket.on(\"inactive player\", this.handleInactivity.bind(this));\n  }\n\n  startCountdown(data) {\n    if (data.id === this.currentPlayerId) {\n      this.activateDireHitTime = Date.now() + data.lag;\n    }\n  }\n\n  drawGame(data) {\n    if (this.playStatus === \"restartScreen\") return;\n\n    if (this.playStatus === \"playing\") {\n      if (this.resetIfLost(data)) return;\n      this.powerCurrentPlayer();\n\n      if (this.initialData) {\n        const offset = this.getCurrentPlayerOffset(data);\n        drawGame(this.context, offset, data);\n        this.handleDireHitCountdown();\n      } else {\n        drawGame(this.context, null, data, true);\n        this.checkInitialData(data);\n      }\n    }\n  }\n\n  handleDireHitCountdown() {\n    if (this.activateDireHitTime) {\n      const currentTime = Date.now();\n\n      if (this.activateDireHitTime < currentTime) {\n        this.activateDireHitTime = null;\n      } else {\n        drawCountdown(this.context, this.activateDireHitTime - currentTime);\n      }\n    }\n  }\n\n  checkInitialData(data) {\n    if (data[this.currentPlayerId]) {\n      this.initialData = true;\n    }\n  }\n\n  resetIfLost(data) {\n    if (!data[this.currentPlayerId] && this.initialData) {\n      this.currentPlayerId = null;\n      this.setGameRestartScreen();\n      this.playStatus = \"restartScreen\";\n      return true;\n    }\n\n    return false;\n  }\n\n  addStartClickListener() {\n    const startButton = document.getElementById(\"start-button\");\n\n    startButton.onclick = () => {\n      this.name = document.getElementById(\"name-input\").value;\n      if (this.name.length > 25) this.name = \"\";\n      this.start(this.name);\n    };\n  }\n\n  addRestartClickListener() {\n    const restartButtons = document.getElementsByClassName(\"restart-button\");\n\n    for (let i = 0; i < restartButtons.length; i++) {\n      let restartButton = restartButtons[i];\n\n      restartButton.onclick = () => {\n        this.start(this.name);\n      };\n    }\n  }\n\n  setGameStartScreen() {\n    const canvas = document.getElementById(\"game-canvas\");\n    const startScreen = document.getElementById(\"start-screen\");\n    const restartScreen = document.getElementById(\"restart-screen\");\n    const instructions = document.getElementById(\"instructions\");\n    const inactiveScreen = document.getElementById(\"inactive-screen\");\n\n    canvas.className = \"\";\n    startScreen.className = \"hidden\";\n    restartScreen.className = \"hidden\";\n    instructions.className = \"hidden\";\n    inactiveScreen.className = \"hidden\";\n  }\n\n  setGameRestartScreen() {\n    const canvas = document.getElementById(\"game-canvas\");\n    const startScreen = document.getElementById(\"start-screen\");\n    const restartScreen = document.getElementById(\"restart-screen\");\n    const instructions = document.getElementById(\"instructions\");\n    const inactiveScreen = document.getElementById(\"inactive-screen\");\n\n    canvas.className = \"hidden\";\n    startScreen.className = \"hidden\";\n    restartScreen.className = \"\";\n    instructions.className= \"hidden\";\n    inactiveScreen.className = \"hidden\";\n  }\n\n  setInstructionsScreen() {\n    const canvas = document.getElementById(\"game-canvas\");\n    const startScreen = document.getElementById(\"start-screen\");\n    const restartScreen = document.getElementById(\"restart-screen\");\n    const instructions = document.getElementById(\"instructions\");\n    const inactiveScreen = document.getElementById(\"inactive-screen\");\n\n    canvas.className = \"hidden\";\n    startScreen.className = \"\";\n    restartScreen.className = \"hidden\";\n    instructions.classList.toggle(\"hidden\");\n    inactiveScreen.className = \"hidden\";\n  }\n\n  setInactiveScreen() {\n    const canvas = document.getElementById(\"game-canvas\");\n    const startScreen = document.getElementById(\"start-screen\");\n    const restartScreen = document.getElementById(\"restart-screen\");\n    const instructions = document.getElementById(\"instructions\");\n    const inactiveScreen = document.getElementById(\"inactive-screen\");\n\n    canvas.className = \"hidden\";\n    startScreen.className = \"hidden\";\n    restartScreen.className = \"hidden\";\n    instructions.className = \"hidden\";\n    inactiveScreen.className = \"\";\n  }\n\n  addInstructionsClickListener() {\n    const instructionsButton = document.getElementById(\"instructions-button\");\n    instructionsButton.onclick = () => {\n      this.setInstructionsScreen();\n    };\n\n    const instructions = document.getElementById(\"instructions\");\n    instructions.onclick = () => {\n      this.setInstructionsScreen();\n    };\n\n    const instructionsBody = document.getElementById(\"instructions-body\");\n    instructionsBody.onclick = e => {\n      e.stopPropagation();\n    };\n  }\n\n  bindKeyHandlers() {\n    Object.keys(GameView.MOVES).forEach(key => {\n      let move = GameView.MOVES[key];\n\n      document.addEventListener('keydown', e => {\n        if (e.key === key) {\n          e.preventDefault();\n          GameView.KEYS[GameView.MOVES[key]] = true;\n        }\n      }, false);\n\n      document.addEventListener('keyup', e => {\n        if (e.key === key) {\n          e.preventDefault();\n          GameView.KEYS[GameView.MOVES[key]] = false;\n        }\n      }, false);\n    });\n\n    document.addEventListener('keydown', e => {\n      if (e.key === \" \") {\n        e.preventDefault();\n        this.activateDireHit();\n      }\n    });\n  }\n\n  getCurrentPlayerOffset(data) {\n    return [\n      CANVAS_X / 2 - data[this.currentPlayerId].pos[0],\n      CANVAS_Y / 2 - data[this.currentPlayerId].pos[1]\n    ];\n  }\n\n  powerCurrentPlayer() {\n    const impulse = 0.5;\n    const allImpulses = [];\n\n    if (GameView.KEYS.up) allImpulses.push([0, -impulse]);\n    if (GameView.KEYS.down) allImpulses.push([0, impulse]);\n    if (GameView.KEYS.left) allImpulses.push([-impulse, 0]);\n    if (GameView.KEYS.right) allImpulses.push([impulse, 0]);\n\n    this.socket.emit(\"move player\", { id: this.currentPlayerId, impulses: allImpulses });\n  }\n\n  activateDireHit() {\n    this.socket.emit(\"dire hit player\", { id: this.currentPlayerId });\n  }\n\n  handleInactivity(data) {\n    if (data.id === this.currentPlayerId) {\n      this.currentPlayerId = null;\n      this.playStatus === \"restartScreen\";\n      this.setInactiveScreen();\n    }\n  }\n}\n\nGameView.MOVES = {\n  \"ArrowLeft\": \"left\",\n  \"ArrowUp\": \"up\",\n  \"ArrowRight\": \"right\",\n  \"ArrowDown\": \"down\"\n};\n\nGameView.KEYS = {\n  up: false,\n  down: false,\n  left: false,\n  right: false\n};\n\nexport default GameView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/game_view.js\n// module id = 1\n// module chunks = 0","export const drawPlayer = (context, offset, data) => {\n  drawPlayerOutline(context, offset, data);\n  drawPlayerName(context, offset, data);\n\n  const img = new Image();\n  img.onload = () => {\n    drawPlayerImage(context, offset, data, img);\n  };\n  img.src = data.img;\n\n  drawPlayerImage(context, offset, data, img);\n};\n\nconst drawPlayerName = (context, offset, data) => {\n  context.fillStyle = PLAYER_INFO_COLOR;\n  context.font = \"bold 14px Arial\";\n  context.fillText(\n    data.name,\n    data.pos[0] + offset[0] + data.radius + 3,\n    data.pos[1] + offset[1]\n  );\n};\n\nconst drawPlayerImage = (context, offset, data, img) => {\n  context.drawImage(\n    img,\n    data.pos[0] + offset[0] - data.radius,\n    data.pos[1] + offset[1] - data.radius,\n    data.radius * 2,\n    data.radius * 2\n  );\n};\n\nconst drawPlayerOutline = (context, offset, data) => {\n  context.beginPath();\n  context.arc(\n    data.pos[0] + offset[0],\n    data.pos[1] + offset[1],\n    data.radius,\n    0,\n    2 * Math.PI\n  );\n\n  context.lineWidth = data.direHit ? DIRE_HIT_OUTLINE_WIDTH : NORMAL_OUTLINE_WIDTH;\n  context.strokeStyle = data.direHit ? DIRE_HIT_COLOR : PLAYER_INFO_COLOR;\n  context.stroke();\n};\n\nconst PLAYER_INFO_COLOR = \"#000\";\nconst DIRE_HIT_COLOR = \"#ff3d00\";\nconst NORMAL_OUTLINE_WIDTH = 5;\nconst DIRE_HIT_OUTLINE_WIDTH = 10;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/player.js\n// module id = 2\n// module chunks = 0","const Util = {\n  dist(pos1, pos2) {\n    return Math.sqrt(\n      Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n    );\n  },\n\n  randomRadius() {\n    return Math.floor(Math.random() * (20 - 5)) + 5;\n  },\n\n  randomVelocity() {\n    return [\n      this.randomVelocityPiece(),\n      this.randomVelocityPiece()\n    ];\n  },\n\n  randomVelocityPiece() {\n    return Math.floor(Math.random() * (1.2 + 1.2)) - 1.2;\n  },\n\n  randomPokemonId() {\n    return POKEMON_IDS[Math.floor(Math.random() * POKEMON_IDS.length)];\n  },\n\n  randomPlayerName() {\n    return POKEMON_CHARACTER_NAMES[Math.floor(Math.random() * POKEMON_CHARACTER_NAMES.length)];\n  },\n\n  randomId() {\n    let text = \"\";\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (let i = 0; i < 5; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n\n    return text;\n  },\n\n  DEFAULT_RADIUS: 15\n};\n\nconst POKEMON_IDS = [\n  1, 4, 7, 24, 29, 34, 92, 112, 147, 152, 155, 158, 220, 304, 371\n];\n\nconst POKEMON_CHARACTER_NAMES = [\n  \"Misty\",\n  \"Lass\",\n  \"Beauty\",\n  \"Serena\",\n  \"Bonnie\",\n  \"Iris\",\n  \"Jessie\",\n  \"Lillie\",\n  \"May\",\n  \"Dawn\",\n  \"Moon\",\n  \"Mallow\",\n  \"Sakura\",\n  \"Shauna\",\n  \"Candela\",\n  \"Officer Jenny\",\n  \"Aria\",\n  \"Olivia\",\n  \"Lusamine\",\n  \"Lana\",\n  \"Professor Ivy\",\n  \"Mom\",\n  \"Sabrina\",\n  \"Viola\",\n  \"Daisy\",\n  \"Bianca\",\n  \"Sumomo\",\n  \"Blanche\",\n  \"Agatha\",\n  \"Georgia\",\n  \"Grace\",\n  \"Malva\",\n  \"Karen\"\n];\n\nmodule.exports = Util;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./server/util.js\n// module id = 3\n// module chunks = 0","import { CANVAS_X, CANVAS_Y } from './game';\nimport GameView from './game_view';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"game-canvas\");\n  canvas.width = CANVAS_X;\n  canvas.height = CANVAS_Y;\n\n  const context = canvas.getContext(\"2d\");\n  const socket = io();\n\n  const gameView = new GameView(context, socket);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/pokemania.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}